#!/usr/bin/perl

#[ Script ]-------------------------------------------------------------------------------------------------#
#                                                                                                           #
# genericseek                                                                                               #
#                                                                                                           #
# PT-br:                                                                                                    #
# Conta quantidade de ocorrências de um trecho até o final do log e armazena a posição para contar a partir #
# de onde parou.                                                                                            #
# Ótimo  para  criar  monitorações  em  tempo  real  de  logs  que estão sendo incrementados.               #
# ----------------------------                                                                              #
#                                                                                                           #
# EN:                                                                                                       #
# Counts  number  of  occurrences  of  a stretch to the end of the log and stores the position to tell from #
# where it stopped.                                                                                         #
# Great  for  creating  monitoring  processes in real time logs that are being increased.                   #
#                                                                                                           #
# rlima@gmail.com                                                                                           #
# $Id: genericseek,v 2 2015/02/05 rlima Exp rlima $                                                         #
#                                                                                                           #
#[ License ]------------------------------------------------------------------------------------------------#
#                                                                                                           #
# Copyright (c) 2017 Reinaldo Marques de Lima reimlima@gmail.com                                            #
#                                                                                                           #
# PT-br:                                                                                                    #
# A  permissão  é  concedida, a título gratuito, a qualquer pessoa que obtenha uma   cópia deste software e #
# arquivos de  documentação  associados (o "Software"), para lidar com o Software sem restrição, incluindo, #
# sem limitação,  os  direitos  de  usar,  copiar,  modificar, mesclar, publicar, distribuir, sublicenciar, #
# e / ou vender cópias do Software, e  permitir  que as  pessoas a  quem  o  Software  é fornecido o façam, #
# sujeito às seguintes condições:                                                                           #
#                                                                                                           #
# O  aviso  de  copyright  acima e este aviso de permissão devem ser incluídos em todas as cópias ou partes #
# substanciais do Software.                                                                                 #
#                                                                                                           #
# O  SOFTWARE  É  FORNECIDO  "COMO ESTÁ", SEM GARANTIA  DE QUALQUER TIPO, EXPRESSA OU IMPLÍCITA, INCLUINDO, #
# SEM LIMITAÇÃO, AS GARANTIAS DE COMERCIALIZAÇÃO, ADEQUAÇÃO A UM DETERMINADO FIM E NÃO VIOLAÇÃO. EM  NENHUM #
# CASO  OS  AUTORES  OU  DIREITOS  AUTORAIS TITULARES  SERÃO RESPONSÁVEIS POR QUALQUER RECLAMAÇÃO, DANOS OU #
# OUTRAS RESPONSABILIDADES, SEJA EM UMA  AÇÃO DE CUMPRIMENTO DE CONTRATO  OU  DE  OUTRA  FORMA,  DECORRENTE #
# DE, OU EM CONEXÃO COM O SOFTWARE OU O USO OU OUTRAS FUNÇÕES DO SOFTWARE.                                  #
#                                                                                                           #
# Exceto  conforme  contido  no  presente aviso, o nome do(s) dos detentores de direitos autorais acima não #
# devem ser utilizados em publicidade ou de outra forma  para  promover  a venda, uso ou outras negociações #
# deste Software sem autorização prévia por escrito.                                                        #
#                                                                                                           #
# ----------------------------                                                                              #
#                                                                                                           #
# EN:                                                                                                       #
# Permission  is  hereby  granted, free  of  charge,  to  any  person obtaining a copy of this software and #
# associated  documentation  files (the "Software"), to deal in the Software without restriction, including #
# without  limitation  the  rights  to  use,  copy, modify, merge, publish, distribute, sublicense,  and/or #
# sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to #
# the following conditions:                                                                                 #
#                                                                                                           #
# The  above  copyright  notice  and  this permission notice shall be included in all copies or substantial #
# portions of the Software.                                                                                 #
#                                                                                                           #
# THE  SOFTWARE  IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,  INCLUDING BUT NOT  #
# LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS  FOR  A  PARTICULAR  PURPOSE AND  NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  LIABILITY, #
# WHETHER  IN  AN  ACTION  OF  CONTRACT, TORT  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                                    #
#                                                                                                           #
# Except  as  contained  in  this  notice,  the name(s) of the above copyright holders shall not be used in #
# advertising  or  otherwise  to  promote  the  sale,  use or other dealings in this Software without prior #
# written authorization.                                                                                    #
#-----------------------------------------------------------------------------------------------------------#

#[ Modules ]------------------------------------------------------------------------------------------------#

use strict;
use warnings;
use JSON;
use Getopt::Std;
use XML::Simple;
use Sys::Hostname;
use File::Basename;
use WebService::Slack::IncomingWebHook;

#[ Variables ]----------------------------------------------------------------------------------------------#

my %ds;
my %keycount;
my %opthash = ();
my ($ds, $key, $log, $code, $seek, $value, $usage, $output, $warning, $critical, $exitcode);
my ($currsize, $outputMsg, $newseekdb, $occurrence, $returnCode, $exitmessage, $monitOutput);
my ($outputformat, $pluginOutput, $getoptsError, $thresholdError, $personalMessage, $outputFormatError);
my $timestamp = time();
my $hostname = hostname;
my $script = basename("$0");
my $seekdb = "genericseek.db";
my $client = WebService::Slack::IncomingWebHook->new(
        webhook_url => 'https://hooks.slack.com/services/ADD/HERE/slackWebhookAddress',
        username   => 'YourUserName',
);

$keycount{count} = '0';

#[ Command line options ]-----------------------------------------------------------------------------------#

getopts(":l:o:k:f:w:c:", \%opthash);
if (keys(%opthash) != 6){
	$getoptsError = scriptUsage("You must fill all options");
	genericExitFunc(1, $getoptsError);
}

$log          = $opthash{l};
$key          = $opthash{k};
$warning      = ($opthash{w})? "$opthash{w}" : "0";
$critical     = ($opthash{c})? "$opthash{c}" : "0";
$occurrence   = $opthash{o};
$outputformat = $opthash{f};

if ($warning == "0") {
	$thresholdError = scriptUsage("warning option must not be 0");
	genericExitFunc(1, $thresholdError);
}

if ($warning >= $critical) {
	$thresholdError = scriptUsage("critical option must be bigger than warning");
	genericExitFunc(1, $thresholdError);
}

#[ Database File Check ]------------------------------------------------------------------------------------#

if (! -e $seekdb){
	open(DBFILE,"> $seekdb") or genericExitFunc(1, "Error trying to open the file $seekdb");
	print DBFILE "$log=0|0;";
	close(DBFILE);
}

#[ Generic exit function ]----------------------------------------------------------------------------------#

sub genericExitFunc {
	$exitcode = shift;
	$exitmessage = shift;
	print "$exitmessage\n";
	exit $exitcode;
}

#[ Usage Function ]-----------------------------------------------------------------------------------------#

sub scriptUsage {
	$personalMessage = shift;
	$usage  = "$personalMessage\n\n";
	$usage .= "Usage: $script -l <log> -k <key> -o '<log occurrence>' -f <outputformat> -w <warning> -c <critical>\n\n";
	$usage .= "\t-l: logfile, Ex.: /var/log/message\n";
	$usage .= "\t-k: key, something to be used as output message Ex.: \"error\" or \"File Monitoring from Application Log\"\n";
	$usage .= "\t-o: occurrence, whatever you're looking for in the log file Ex.: \"error\"\n";
	$usage .= "\t-f: outputformat, what kind of output you want? Ex.: json, xml, icinga, zabbix, slack\n";
	$usage .= "\t-w: warning, threshold for Warning Message Ex.: 30\n";
	$usage .= "\t-c: critical, threshold for Critical Message Ex.: 50 (must be bigger than warning number)\n";
	return $usage;
}

#[ Status Calculation Function ]----------------------------------------------------------------------------#

sub statusGenerate {
	if($value < $warning){
		$returnCode = 0;
		$pluginOutput = "OK";
	}
	if($value >= $warning){
		$returnCode = 1;
		$pluginOutput = "[WARNING] Number of events \"$occurrence\" in logfile is greater than $warning";
	}
	if($value >= $critical){
		$returnCode = 2;
		$pluginOutput = "[CRITICAL] Number of events \"$occurrence\" in logfile is greater than $critical";
	}
	return $returnCode, $pluginOutput;
}

#[ Icinga Output Function ]---------------------------------------------------------------------------------#

sub outputGenerate {
	$timestamp = shift;
	$key = shift;
	$value = shift;
	$code = shift;
	$outputMsg = shift;
	$outputformat = shift;
	if ($outputformat =~ "icinga"){
		$monitOutput = "[$timestamp] PROCESS_SERVICE_CHECK_RESULT;$hostname;$key;$code;$outputMsg";
	} elsif ($outputformat =~ "xml") {
		$monitOutput = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
		$ds = {filematch => [{hostname => [$hostname], timestamp => [$timestamp], key => [$key], value => [$value], code => [$code], outputMsg => [$outputMsg]}]};
		$monitOutput .= XMLout($ds, Rootname => "");
	} elsif ($outputformat =~ "json") {
		%ds = ('filematch' => [{'hostname' => $hostname}, {'timestamp' => $timestamp}, {'key' => $key}, {'value' => $value}, {'code' => $code }, {'outputMsg' => $outputMsg }]);
		$monitOutput = encode_json \%ds;
	} else {
		%ds = ('request' => 'sender data', 'data' => [{'host' => $hostname, 'key' => $key, 'value' => $value}], 'clock' => $timestamp);
		$monitOutput = encode_json \%ds;
	}
	return $monitOutput;
}

#[ Main Script ]--------------------------------------------------------------------------------------------#

open(SEEK, $seekdb) or genericExitFunc(1, "Error trying to open the file $seekdb");
$seek = <SEEK>;
close(SEEK);

open(LOG, $log) or genericExitFunc(1, "Error trying to open the file $log");
$currsize = (stat($log))[7];

if ($seek =~ /$log=(\d+)\|(\d+);/){
	if ($currsize < $2){
		seek(LOG, 0, 0);
	}else{
		seek(LOG, $1, 0);
	}
}else{
	seek(LOG, 0, 0);
}

while(<LOG>){
	chomp($_);
	if($_ =~ /$occurrence/){
		$keycount{count}++;
	}
}

$value = $keycount{count};
($code, $outputMsg) = statusGenerate($value);
$newseekdb .= $log ."=". tell(LOG) ."|". $currsize .";";

open(SEEK,"> $seekdb") or genericExitFunc(1, "Error trying to open the file $seekdb");
print SEEK "$newseekdb";
close(SEEK);
close(LOG);

#[ Verify the chosen output format, call the function and print ]-------------------------------------------#

if ($outputformat =~ /xml|json|icinga|zabbix/) {
	$output .= outputGenerate($timestamp, $key, $value, $code, $outputMsg, $outputformat);
} elsif ($outputformat =~ /slack/){
	if ($code != "0"){
		$client->post( text => "$hostname -> slack: $logname => $outputMsg", );
		$output = "Sending monitoring to Slack";
	} else {
		$output = "Everithing OK";
	}
} else {
	$outputFormatError = scriptUsage("outputformat option must be xml, json, icinga, zabbix or slack");
	genericExitFunc(1, $outputFormatError);
}

genericExitFunc($code, $output);
